"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findImageInImage = void 0;
var sharp_1 = __importDefault(require("sharp"));
var jimp_1 = __importDefault(require("jimp"));
var findImageInImage = function (outerImage, innerImage, outerImageType, innerImageType, aspectRatio, max, similarityThreshold) {
    if (aspectRatio === void 0) { aspectRatio = 1; }
    if (max === void 0) { max = 1; }
    if (similarityThreshold === void 0) { similarityThreshold = 1; }
    return __awaiter(void 0, void 0, void 0, function () {
        var buffer, outerImg, innerBuffer, innerImg, file_o, file_i, buff_o, buff_i, meta_o, meta_i, size_o, size_i, upper, found, finds, matches, oy, ox, y, pos_i, pos_o, slice_i, slice_o, similarity, imageWCenter_1, imageHCenter_1, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 13, , 14]);
                    if (!(typeof outerImage == "string")) return [3 /*break*/, 3];
                    return [4 /*yield*/, jimp_1.default.read(outerImage)];
                case 1:
                    outerImg = _a.sent();
                    return [4 /*yield*/, outerImg.getBufferAsync(outerImageType)];
                case 2:
                    buffer = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    buffer = outerImage;
                    _a.label = 4;
                case 4:
                    if (!(typeof innerImage == "string")) return [3 /*break*/, 7];
                    return [4 /*yield*/, jimp_1.default.read(innerImage)];
                case 5:
                    innerImg = _a.sent();
                    return [4 /*yield*/, innerImg.getBufferAsync(innerImageType)];
                case 6:
                    innerBuffer = _a.sent();
                    return [3 /*break*/, 8];
                case 7:
                    innerBuffer = innerImage;
                    _a.label = 8;
                case 8:
                    file_o = (0, sharp_1.default)(buffer);
                    file_i = (0, sharp_1.default)(innerBuffer);
                    return [4 /*yield*/, file_o.raw().toBuffer()];
                case 9:
                    buff_o = _a.sent();
                    return [4 /*yield*/, file_i.raw().toBuffer()];
                case 10:
                    buff_i = _a.sent();
                    return [4 /*yield*/, file_o.metadata()];
                case 11:
                    meta_o = _a.sent();
                    return [4 /*yield*/, file_i.metadata()];
                case 12:
                    meta_i = _a.sent();
                    if (meta_o.width &&
                        meta_i.width &&
                        meta_o.channels &&
                        meta_i.channels &&
                        meta_o.height &&
                        meta_i.height) {
                        size_o = meta_o.width * meta_o.channels;
                        size_i = meta_i.width * meta_i.channels;
                        upper = buff_i.slice(0, size_i);
                        found = -1;
                        finds = [];
                        if (meta_i.width <= meta_o.width && meta_i.height <= meta_o.height) {
                            // must be containable within
                            do {
                                found = buff_o.indexOf(upper, found + 1); // upper row is present, so its another candidate
                                if (found != -1) {
                                    matches = true;
                                    oy = Math.floor(found / size_o);
                                    ox = Math.floor((found - size_o * oy) / meta_o.channels);
                                    for (y = 1; matches && y < meta_i.height; y++) {
                                        pos_i = y * size_i;
                                        pos_o = y * size_o + found;
                                        slice_i = buff_i.slice(pos_i, pos_i + size_i);
                                        slice_o = buff_o.slice(pos_o, pos_o + size_i);
                                        similarity = calculateSimilarity(slice_o, slice_i);
                                        matches = similarity >= similarityThreshold;
                                    }
                                    if (matches) {
                                        finds.push({ x: ox, y: oy, w: meta_i.width, h: meta_i.height });
                                    }
                                }
                            } while (found != -1 && finds.length < max);
                        }
                        else {
                            return [2 /*return*/, { error: 400, message: "Inner bigger than outer" }];
                        }
                        if (finds.length > 0) {
                            imageWCenter_1 = meta_i.width / 2;
                            imageHCenter_1 = meta_i.height / 2;
                            return [2 /*return*/, max == 1
                                    ? {
                                        x: (finds[0].x + imageWCenter_1) / aspectRatio,
                                        y: (finds[0].y + imageHCenter_1) / aspectRatio,
                                    }
                                    : finds.map(function (find) {
                                        return {
                                            x: (find.x + imageWCenter_1) / aspectRatio,
                                            y: (find.y + imageHCenter_1) / aspectRatio,
                                        };
                                    })];
                        }
                        else {
                            return [2 /*return*/, { error: 404, message: "Image not found" }];
                        }
                    }
                    return [3 /*break*/, 14];
                case 13:
                    e_1 = _a.sent();
                    return [2 /*return*/, {
                            error: 500,
                            message: "Something went wrong, might be that images path not right",
                        }];
                case 14: return [2 /*return*/];
            }
        });
    });
};
exports.findImageInImage = findImageInImage;
var calculateSimilarity = function (slice1, slice2) {
    if (slice1.length !== slice2.length) {
        throw new Error("Image slices must have the same length");
    }
    var sumSquaredDiff = 0;
    for (var i = 0; i < slice1.length; i++) {
        var diff = slice1[i] - slice2[i];
        sumSquaredDiff += diff * diff;
    }
    var mse = sumSquaredDiff / slice1.length;
    var similarity = 1 - mse / Math.pow(255, 2); // Normalize the similarity to a value between 0 and 1
    return similarity;
};
